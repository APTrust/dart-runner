DART Runner: Bag and ship files from the command line.

DART Runner is a command-line tool for creating and transferring bags using
JSON workflows exported from the DART UI. Generally, you will define a job or
workflow within the DART desktop application, export it as a JSON file, then
run it here. For more details, see the "Resources" section at the end of this
document.

-------
Options
-------

  --workflow
      Path to the workflow JSON file. Use this when you want to run a
      workflow on a batch of files. If you specify --workflow, you must
      also specify --batch. Workflow files can be exported from the DART UI.

  --batch
      Path to the CSV batch file. Use this with --workflow to specify a
      list of files or directories for the workflow. For details on the
      batch file format, see:
      https://aptrust.github.io/dart-docs/users/workflows/batch_jobs/

  --output-dir
      Path to the directory where packages (bags) will be created. This
      parameter is always REQUIRED. Both jobs and workflows will write
      output to this directory.

  --delete
      Indicates whether to delete bags after the job completes. Accepts
      "true" or "false."
      - The default is "true" for jobs and workflows that include an
        upload step, so the bag will be deleted after a successful upload.
      - The default is "false" if there is no upload step, because you
        probably want to keep the bag.

  --concurrency
      Number of jobs to run at once. The default is 1. This value
      generally should not exceed the number of processor cores on
      your machine. Because most of the work is reading and writing
      files, you may see diminishing returns above 2. Concurrency only
      applies to workflows. For a single job, you can omit this parameter.

  --help
      Display this help document.

--------
Examples
--------

If you are running a single job, you can send JSON job parameters to
dart-runner through STDIN, like this:

    echo '{ json }' | dart-runner --workflow=workflow.json --output-dir=/dir

The JSON job parameters tell dart-runner which files to bag and what tag
values to set. Meanwhile, the workflow JSON specifies the BagIt profile
to use and the destination for the resulting bag.

Alternatively, you can feed a file into STDIN, as in these examples:

    dart-runner --workflow=workflow.json --output-dir=/dir < job_params.json
    cat job_params.json | dart-runner --workflow=workflow.json --output-dir=/dir

Both examples run the job described in "job_params.json" and create the bag
in the specified output directory.

To run a workflow:

    dart-runner --workflow=path/to/workflow.json  \
                --batch=path/to/batch.csv         \
                --output-dir=path/to/directory    \
                --concurrency=2                   \
                --delete=false

This command runs each entry in the --batch CSV file through the workflow
described in the --workflow JSON file, placing the resulting bags in the
specified output directory. Here, "--delete=false" prevents the bags from
being deleted after a successful upload.

Setting "--concurrency=2" instructs DART Runner to process two bags at once,
instead of the default one at a time.

If you omit --delete or set it to "true," bags are removed after a successful
upload.

----------
Exit Codes
----------

    0 - Normal exit, indicating no errors occurred and all tasks succeeded.

    1 - Runtime error, meaning DART Runner started but encountered an
        error during processing.
        - For a single job, this usually indicates a failure in bagging,
          validation, or upload. Check the JSON output for more details.
        - For a batch workflow, it means at least one item in the batch
          failed. An error might appear on stderr saying something like
          "2 Job(s) failed".

    2 - Usage error, meaning DART Runner did not begin the job because
        a required parameter was missing or invalid. This may happen
        if --workflow isn't provided, if a file path doesn't exist, or
        if the CSV/JSON is malformed. The stderr output should provide
        additional details.

----------------------
Sample Job Params JSON
----------------------

Below is an example job parameters file that instructs dart-runner to bag
everything in "/home/linus/documents" and "/home/linus/photos." It also
specifies two tags for "bag-info.txt" and one for "aptrust-info.txt."

These parameters would work together with a separate workflow JSON file that
tells DART Runner which BagIt profile to use and where to send the finished
bag.

{
    "packageName": "TestBag.tar",
    "files": [
        "/home/linus/documents",
        "/home/linus/photos"
    ],
    "tags": [
        {
            "tagFile": "bag-info.txt",
            "tagName": "Tag-One",
            "value":   "Value One"
        },
        {
            "tagFile": "bag-info.txt",
            "tagName": "Tag-Two",
            "value":   "Value Two"
        },
        {
            "tagFile": "aptrust-info.txt",
            "tagName": "Tag-Three",
            "value":   "Value Three"
        }
    ]
}

-------------
Output Format
-------------

For each finished job, DART Runner prints a single JSON line to stdout. That
means one JSON line per job. If you run a batch workflow, you'll see one JSON
line for every row in your CSV file.

If any errors occur, DART Runner prints a short summary to stderr. However,
the JSON line sent to stdout will typically have more detailed information
about what went wrong.

Output from a successful job might look like this:

{
    "jobName": "TestBag.tar",
    "payloadByteCount": 170742,
    "payloadFileCount": 55,
    "succeeded": true,
    "packageResult": {
        "attempt": 1,
        "completed": "2021-12-14T14:50:50.684655-05:00",
        "errors": {},
        "fileMtime": "2021-12-14T14:50:50.684637052-05:00",
        "filepath": "/home/linustmp/bags/TestBag.tar",
        "filesize": 224256,
        "info": "",
        "operation": "package",
        "provider": "Bagger - DART Runner v0.91-beta-1-g70b06da...",
        "remoteChecksum": "",
        "remoteURL": "",
        "started": "2021-12-14T14:50:50.66122-05:00",
        "warning": ""
    },
    "validationResults": [{
        "attempt": 1,
        "completed": "2021-12-14T14:50:50.684665-05:00",
        "errors": {},
        "fileMtime": "2021-12-14T14:50:50.684637052-05:00",
        "filepath": "/home/linustmp/bags/TestBag.tar",
        "filesize": 224256,
        "info": "",
        "operation": "validation",
        "provider": "Validator - DART Runner v0.91-beta-1-g70b06da...",
        "remoteChecksum": "",
        "remoteURL": "",
        "started": "2021-12-14T14:50:50.684656-05:00",
        "warning": ""
    }],
    "uploadResults": [{
        "attempt": 1,
        "completed": "2021-12-14T14:50:50.733585-05:00",
        "errors": {},
        "fileMtime": "2021-12-14T14:50:50.684637052-05:00",
        "filepath": "/home/linustmp/bags/TestBag.tar",
        "filesize": 224256,
        "info": "Output file at /home/linustmp/bags/TestBag.tar was deleted...",
        "operation": "upload",
        "provider": "Uploader - DART Runner v0.91-beta-1-g70b06da...",
        "remoteChecksum": "09f4a6d159e07cd11c82ead5d2a3e95c-1",
        "remoteURL": "s3://localhost:9899/dart-runner.test/TestBag.tar",
        "started": "2021-12-14T14:50:50.684666-05:00",
        "warning": ""
    }],
    "validationErrors": null
}

Key points in this output include:

  succeeded
      True or false, indicating if the entire job succeeded.

  errors
      Within each result, a set of key-value pairs describing any
      failures. If the job succeeded, this is empty.

  remoteURL
      Where the package was uploaded (only in uploadResults).

  remoteChecksum
      The ETag from the S3 server after a successful upload
      (applies only to uploadResults for S3).

---------
Scripting
---------

Most scripting languages let you capture stdout, stderr, and the return code
from external processes. To script DART Runner effectively:

1. Check the exit code (0, 1, or 2). If it's non-zero, handle the error.
2. Redirect stdout if you want to save or parse the JSON output in your script.

Example redirect:

    dart-runner [args] > output_log.json

---------
Resources
---------

DART
    Source:      https://github.com/APTrust/dart
    User Guide:  https://aptrust.github.io/dart-docs/

DART Runner
    Source:      https://github.com/APTrust/dart-runner
    User Guide:  https://aptrust.github.io/dart-docs/users/dart-runner/

    Batch File Format:
      https://aptrust.github.io/dart-docs/users/workflows/batch_jobs/

DART and DART Runner are open-source projects from APTrust.org.
